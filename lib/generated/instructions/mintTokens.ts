/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category MintTokens
 * @category generated
 */
export type MintTokensInstructionArgs = {
  amount: beet.bignum
}
/**
 * @category Instructions
 * @category MintTokens
 * @category generated
 */
export const mintTokensStruct = new beet.BeetArgsStruct<
  MintTokensInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['amount', beet.u64],
  ],
  'MintTokensInstructionArgs'
)
/**
 * Accounts required by the _mintTokens_ instruction
 *
 * @property [_writable_, **signer**] authority
 * @property [_writable_] mint
 * @property [_writable_] destinationAta
 * @category Instructions
 * @category MintTokens
 * @category generated
 */
export type MintTokensInstructionAccounts = {
  authority: web3.PublicKey
  mint: web3.PublicKey
  destinationAta: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const mintTokensInstructionDiscriminator = [
  59, 132, 24, 246, 122, 39, 8, 243,
]

/**
 * Creates a _MintTokens_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category MintTokens
 * @category generated
 */
export function createMintTokensInstruction(
  accounts: MintTokensInstructionAccounts,
  args: MintTokensInstructionArgs,
  programId = new web3.PublicKey('9LqUvkM7zkVqpYypCRsuh5KitHbZZFrcfwkRVgirnnUf')
) {
  const [data] = mintTokensStruct.serialize({
    instructionDiscriminator: mintTokensInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.mint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.destinationAta,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}

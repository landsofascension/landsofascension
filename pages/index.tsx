"use client"

import {
  useAnchorWallet,
  useConnection,
  useWallet,
} from "@solana/wallet-adapter-react"
import {
  PublicKey,
  Transaction,
  TransactionMessage,
  VersionedTransaction,
} from "@solana/web3.js"
import type { NextPage } from "next"
import dynamic from "next/dynamic"
import Head from "next/head"
import Image from "next/image"
import React from "react"
import { AnchorProvider, Program } from "@coral-xyz/anchor"
import { IDL } from "@/lib/types/game_core"

const WalletDisconnectButtonDynamic = dynamic(
  async () =>
    (await import("@solana/wallet-adapter-react-ui")).WalletDisconnectButton,
  { ssr: false }
)
const WalletMultiButtonDynamic = dynamic(
  async () =>
    (await import("@solana/wallet-adapter-react-ui")).WalletMultiButton,
  { ssr: false }
)

const PROGRAM_ID = new PublicKey("9LqUvkM7zkVqpYypCRsuh5KitHbZZFrcfwkRVgirnnUf")

const Home: NextPage = () => {
  const { connection } = useConnection()
  const wallet = useAnchorWallet()

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div>
          <WalletMultiButtonDynamic />
          <WalletDisconnectButtonDynamic />
        </div>

        <button
          style={{
            margin: "20px 0",
          }}
          onClick={async () => {
            if (!wallet || !wallet.signTransaction)
              throw new Error("Please, connect your wallet first.")

            const program = new Program(
              IDL,
              PROGRAM_ID,
              new AnchorProvider(connection, wallet, {})
            )

            const palaceAddress = PublicKey.findProgramAddressSync(
              [wallet.publicKey?.toBytes()],
              PROGRAM_ID
            )[0]

            const ix = await program.methods
              .initialize()
              .accounts({
                palace: palaceAddress,
              })
              .instruction()

            const { blockhash, lastValidBlockHeight } = await connection
              .getLatestBlockhash()
              .then((res) => res)

            const messageV0 = new TransactionMessage({
              payerKey: wallet.publicKey,
              recentBlockhash: blockhash,
              instructions: [ix],
            }).compileToV0Message()

            const tx = new VersionedTransaction(messageV0)
            const signed = await wallet.signTransaction(tx)

            const txid = await connection.sendTransaction(signed)

            const confirmed = await connection.confirmTransaction({
              signature: txid,
              blockhash,
              lastValidBlockHeight,
            })

            if (confirmed.value.err) {
              throw new Error(confirmed.value.err.toString())
            }
          }}
        >
          initialize
        </button>

        <h3>your coins: 0</h3>
      </main>
    </>
  )
}

export default Home

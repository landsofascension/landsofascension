"use client"

import { useAnchorWallet, useConnection } from "@solana/wallet-adapter-react"
import {
  PublicKey,
  TransactionMessage,
  VersionedTransaction,
} from "@solana/web3.js"
import type { NextPage } from "next"
import dynamic from "next/dynamic"
import Head from "next/head"
import React, { useCallback, useEffect, useState } from "react"
import { AnchorProvider, BN, IdlAccounts, Program } from "@coral-xyz/anchor"
import { ToastContainer, toast } from "react-toastify"
import "react-toastify/dist/ReactToastify.css"
import {
  createAssociatedTokenAccountInstruction,
  getAssociatedTokenAddress,
} from "@solana/spl-token"
import { Button, Heading, Input, Label, Text } from "theme-ui"
import { signAndSendTransactionInstructions } from "@/utils/transactions"
import { GameCore, IDL } from "@/lib/types/game_core"

const WalletDisconnectButtonDynamic = dynamic(
  async () =>
    (await import("@solana/wallet-adapter-react-ui")).WalletDisconnectButton,
  { ssr: false }
)
const WalletMultiButtonDynamic = dynamic(
  async () =>
    (await import("@solana/wallet-adapter-react-ui")).WalletMultiButton,
  { ssr: false }
)

const PROGRAM_ID = new PublicKey("9LqUvkM7zkVqpYypCRsuh5KitHbZZFrcfwkRVgirnnUf")

const toastId = "test"

const mint = PublicKey.findProgramAddressSync(
  [Buffer.from("mint")],
  PROGRAM_ID
)[0]

export type Palace = IdlAccounts<typeof IDL>["playerPalace"]
export type Player = IdlAccounts<typeof IDL>["player"]

const Home: NextPage = () => {
  const { connection } = useConnection()
  const [program, setProgram] = useState<Program<GameCore> | null>(null)
  const wallet = useAnchorWallet()
  const [balance, setBalance] = useState(0)
  const [palace, setPalace] = useState<Palace | null>(null)
  const [player, setPlayer] = useState<Player | null>(null)

  const fetchUserTokenBalance = useCallback(async () => {
    if (wallet?.publicKey) {
      try {
        const vault = PublicKey.findProgramAddressSync(
          [Buffer.from("player_vault"), wallet.publicKey.toBytes()],
          PROGRAM_ID
        )[0]

        const balance = Number(
          (await connection.getTokenAccountBalance(vault)).value.amount
        )

        console.log(balance)
        setBalance(balance)
      } catch (e) {
        console.error(e)
      }
    }
  }, [wallet?.publicKey])

  const fetchUserPalace = useCallback(async () => {
    if (wallet?.publicKey) {
      try {
        const program = new Program(
          IDL,
          PROGRAM_ID,
          new AnchorProvider(connection, wallet, {})
        )

        const palaceAddress = PublicKey.findProgramAddressSync(
          [Buffer.from("player_palace"), wallet.publicKey.toBytes()],
          PROGRAM_ID
        )[0]

        const palace = await program.account.playerPalace.fetch(palaceAddress)
        setPalace(palace)
      } catch (e) {
        console.error(e)
      }
    }
  }, [wallet?.publicKey])

  const fetchPlayerAccount = useCallback(async () => {
    if (wallet?.publicKey) {
      try {
        const program = new Program(
          IDL,
          PROGRAM_ID,
          new AnchorProvider(connection, wallet, {})
        )

        const playerAddress = PublicKey.findProgramAddressSync(
          [Buffer.from("player"), wallet.publicKey.toBytes()],
          PROGRAM_ID
        )[0]

        const player = await program.account.player.fetch(playerAddress)
        setPlayer(player)
      } catch (e) {
        console.error(e)
      }
    }
  }, [wallet?.publicKey])

  useEffect(() => {
    fetchUserTokenBalance()
  }, [fetchUserTokenBalance])

  useEffect(() => {
    fetchUserPalace()
  }, [fetchUserPalace])

  useEffect(() => {
    fetchPlayerAccount()
  }, [fetchPlayerAccount])

  useEffect(() => {
    if (wallet && connection) {
      const program = new Program(
        IDL,
        PROGRAM_ID,
        new AnchorProvider(connection, wallet, {})
      )

      setProgram(program)
    }
  }, [wallet])

  const handleSignUp = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()

    try {
      const formData = new FormData(e.currentTarget)

      const username = formData.get("username")?.toString()
      const password = formData.get("password")?.toString()

      if (!username || !password) throw new Error("Please, fill all the fields")

      const resRaw = await fetch("/api/signup", {
        method: "POST",
        body: JSON.stringify({
          username,
          password,
        }),
        headers: {
          "Content-Type": "application/json",
        },
      })

      const resJson = await resRaw.json()

      if (!resRaw.ok) throw new Error(resJson.message)

      const { message } = resJson

      toast(message, { type: "success" })
    } catch (e) {
      console.error(e)

      toast(e + "", { type: "error" })
    }
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        {wallet && !player ? (
          <button
            style={{
              margin: "20px 0",
            }}
            onClick={async () => {
              try {
                if (!wallet || !wallet.signTransaction || !program)
                  throw new Error("Please, connect your wallet first.")

                const palaceAddress = PublicKey.findProgramAddressSync(
                  [Buffer.from("palace"), wallet.publicKey.toBytes()],
                  PROGRAM_ID
                )[0]

                const ix = await program.methods
                  .signUpPlayer()
                  .accounts({
                    playerPalace: palaceAddress,
                  })
                  .instruction()

                await signAndSendTransactionInstructions(connection, wallet, [
                  ix,
                ])
              } catch (e) {
                console.error(e)
              } finally {
                fetchUserPalace()
                fetchPlayerAccount()
              }
            }}
          >
            initialize
          </button>
        ) : null}

        {wallet && player ? (
          <>
            <h2>palace</h2>
            <div
              style={{
                display: "flex",
                gap: "16px",
              }}
            >
              <button
                style={{
                  margin: "20px 0",
                }}
                onClick={async () => {
                  try {
                    if (!wallet || !wallet.signTransaction || !program)
                      throw new Error("Please, connect your wallet first.")

                    if (!palace)
                      throw new Error("Please, initialize your palace first.")

                    const destination = wallet.publicKey
                    const ata = await getAssociatedTokenAddress(
                      mint,
                      destination
                    )
                    const account =
                      await program.provider.connection.getAccountInfo(ata)

                    const ixs = []
                    // create associated token account if it doesn't exist
                    if (!account) {
                      ixs.push(
                        createAssociatedTokenAccountInstruction(
                          wallet.publicKey,
                          ata,
                          destination,
                          mint
                        )
                      )
                    }

                    ixs.push(
                      await program.methods
                        .collectPalaceTokens()
                        .accounts({
                          owner: wallet.publicKey,
                        })
                        .instruction()
                    )

                    const { blockhash, lastValidBlockHeight } = await connection
                      .getLatestBlockhash()
                      .then((res) => res)

                    const vault = PublicKey.findProgramAddressSync(
                      [Buffer.from("player_vault"), wallet.publicKey.toBytes()],
                      PROGRAM_ID
                    )[0]

                    console.log(vault.toString())

                    const message = new TransactionMessage({
                      instructions: ixs,
                      payerKey: wallet.publicKey,
                      recentBlockhash: blockhash,
                    }).compileToV0Message()

                    const tx = new VersionedTransaction(message)

                    toast("Please, sign the transaction")

                    const signed = await wallet.signTransaction(tx)

                    const txid = await connection.sendTransaction(signed, {})

                    const confirmed = await connection.confirmTransaction({
                      signature: txid,
                      blockhash,
                      lastValidBlockHeight,
                    })

                    if (confirmed.value.err) {
                      throw new Error(confirmed.value.err.toString())
                    }

                    toast("Success!", { type: "success" })
                  } catch (e) {
                    console.error(e)
                  } finally {
                    fetchUserTokenBalance()
                    fetchUserPalace()
                  }
                }}
              >
                collect tokens
              </button>
              <button
                style={{
                  margin: "20px 0",
                }}
                onClick={async () => {
                  try {
                    if (!balance) throw new Error("You don't have any coins")
                    if (!wallet || !program)
                      throw new Error("Please, connect your wallet first.")

                    const ixs = [
                      await program.methods
                        .collectPlayerResources()
                        .accounts({
                          owner: wallet.publicKey,
                        })
                        .instruction(),
                    ]

                    await signAndSendTransactionInstructions(
                      connection,
                      wallet,
                      ixs
                    )
                  } catch (e) {
                    console.error(e)
                  } finally {
                    fetchPlayerAccount()
                  }
                }}
              >
                collect resources
              </button>
              <button
                style={{
                  margin: "20px 0",
                }}
                onClick={async () => {
                  try {
                    if (!balance) throw new Error("You don't have any coins")
                    if (!wallet || !program)
                      throw new Error("Please, connect your wallet first.")

                    const ixs = [
                      await program.methods
                        .upgradePlayerPalace()
                        .accounts({
                          owner: wallet.publicKey,
                        })
                        .instruction(),
                    ]

                    await signAndSendTransactionInstructions(
                      connection,
                      wallet,
                      ixs
                    )
                  } catch (e) {
                    console.error(e)
                  } finally {
                    fetchUserTokenBalance()
                    fetchUserPalace()
                    fetchPlayerAccount()
                  }
                }}
              >
                upgrade palace
              </button>
            </div>
            <div
              style={{
                display: "flex",
                gap: "16px",
              }}
            >
              <h3>Palace level: {palace?.level}</h3>
              <h3>Tokens: {balance}</h3>
              <h3>Gold: {player?.gold.toNumber()}</h3>
              <h3>Lumber: {player?.lumber.toNumber()}</h3>
            </div>

            <h2>store</h2>
            <button
              style={{
                margin: "20px 0",
              }}
              onClick={async () => {
                try {
                  if (!balance) throw new Error("You don't have any coins")

                  if (!wallet || !program)
                    throw new Error("Please, connect your wallet first.")

                  const ixs = [
                    await program.methods
                      .purchaseMerchantItem("Miner", new BN(1000))
                      .accounts({
                        owner: wallet.publicKey,
                      })
                      .instruction(),
                  ]

                  await signAndSendTransactionInstructions(
                    connection,
                    wallet,
                    ixs
                  )
                } catch (e) {
                  console.error(e)
                } finally {
                  fetchUserTokenBalance()
                  fetchUserPalace()
                }
              }}
            >
              Buy 1000 Miner
            </button>
            <button
              style={{
                margin: "20px 0",
              }}
              onClick={async () => {
                try {
                  if (!balance) throw new Error("You don't have any coins")

                  if (!wallet || !program)
                    throw new Error("Please, connect your wallet first.")

                  const ixs = [
                    await program.methods
                      .purchaseMerchantItem("Lumberjack", new BN(1000))
                      .accounts({
                        owner: wallet.publicKey,
                      })
                      .instruction(),
                  ]

                  await signAndSendTransactionInstructions(
                    connection,
                    wallet,
                    ixs
                  )
                } catch (e) {
                  console.error(e)
                } finally {
                  fetchUserTokenBalance()
                  fetchUserPalace()
                }
              }}
            >
              Buy 1000 Lumberjack
            </button>
          </>
        ) : null}

        <Heading>Sign up</Heading>
        <Text>Create your account and embark on a fantastic journey today</Text>

        <form
          onSubmit={handleSignUp}
          sx={{
            display: "flex",
            flexDirection: "column",
            gap: "16px",
            width: "300px",
          }}
        >
          <Label>
            Username
            <Input type="text" name="username" placeholder="username" />
          </Label>

          <Label>
            Password
            <Input type="password" name="password" placeholder="password" />
          </Label>
          <Button type="submit">Signup</Button>
        </form>

        <Text mt="8px">Or:</Text>
        <div>
          {!wallet?.publicKey ? (
            <WalletMultiButtonDynamic
              style={{
                background: "#222",
              }}
            >
              Sign up with&nbsp;&nbsp;
              <svg width="96" fill="none" className="my-5" viewBox="0 0 323 48">
                <g clipPath="url(#clip0_174_4480)">
                  <path
                    fill="url(#paint0_linear_174_4480)"
                    d="M54.27 37.84l-8.86 9.51a2.101 2.101 0 01-1.51.65h-42a1 1 0 01-.75-1.73l8.85-9.5a2.07 2.07 0 011.51-.66h42a1 1 0 01.76 1.73zm-8.86-19.13a2.06 2.06 0 00-1.51-.65h-42a1 1 0 00-.75 1.73l8.85 9.5a2.06 2.06 0 001.51.65h42a1 1 0 00.76-1.73l-8.86-9.5zM1.9 11.89h42a2.072 2.072 0 001.51-.66l8.86-9.5A1 1 0 0053.51 0h-42A2.1 2.1 0 0010 .65l-8.85 9.51a1 1 0 00.75 1.73z"
                  ></path>
                  <path
                    fill="#fff"
                    d="M105.47 20.3H83v-7.4h28.31V5.5H82.93a7.39 7.39 0 00-7.43 7.35v7.5a7.39 7.39 0 007.43 7.35h22.49v7.4H76v7.4h29.44a7.38 7.38 0 007.42-7.35v-7.5a7.378 7.378 0 00-7.39-7.35zM149 5.5h-22.55a7.39 7.39 0 00-7.45 7.35v22.3a7.39 7.39 0 007.43 7.35H149a7.382 7.382 0 007.42-7.35v-22.3a7.383 7.383 0 00-4.59-6.802A7.382 7.382 0 00149 5.5zm-.05 29.6H126.5V12.9h22.44l.01 22.2zM228 5.5h-22a7.393 7.393 0 00-7.43 7.35V42.5h7.48V30.34H228V42.5h7.48V12.85A7.38 7.38 0 00228 5.5zm0 17.44h-21.9v-10H228v10zM315.57 5.5h-22a7.385 7.385 0 00-5.238 2.136 7.389 7.389 0 00-2.192 5.214V42.5h7.48V30.34h21.9V42.5H323V12.85a7.386 7.386 0 00-7.43-7.35zm-.05 17.44h-21.9v-10h21.9v10zM272 35.1h-3L258.29 8.58a4.94 4.94 0 00-4.59-3.08H247a4.931 4.931 0 00-4.95 4.9v32.1h7.48V12.9h3l10.72 26.52a4.995 4.995 0 004.6 3.08h6.65a4.921 4.921 0 005-4.9V5.5H272v29.6zM170.55 5.5h-7.48v29.65a7.385 7.385 0 007.43 7.35H193v-7.4h-22.45V5.5z"
                  ></path>
                </g>
                <defs>
                  <linearGradient
                    id="paint0_linear_174_4480"
                    x1="5.4"
                    x2="49.45"
                    y1="49.14"
                    y2="-0.51"
                    gradientUnits="userSpaceOnUse"
                  >
                    <stop offset="0.08" stopColor="#9945FF"></stop>
                    <stop offset="0.3" stopColor="#8752F3"></stop>
                    <stop offset="0.5" stopColor="#5497D5"></stop>
                    <stop offset="0.6" stopColor="#43B4CA"></stop>
                    <stop offset="0.72" stopColor="#28E0B9"></stop>
                    <stop offset="0.97" stopColor="#19FB9B"></stop>
                  </linearGradient>
                  <clipPath id="clip0_174_4480">
                    <path fill="#fff" d="M0 0H323V48H0z"></path>
                  </clipPath>
                </defs>
              </svg>
            </WalletMultiButtonDynamic>
          ) : (
            <WalletDisconnectButtonDynamic
              style={{
                background: "#222",
              }}
            />
          )}
        </div>

        <ToastContainer position={toast.POSITION.TOP_CENTER} autoClose={1000} />
      </main>
    </>
  )
}

export default Home
